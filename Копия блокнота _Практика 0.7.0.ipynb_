{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1l_GPJjnpKNgfxCGYwBYdhk5eQjOdijks","timestamp":1730367860559}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Ссылка на материалы:  [пдф тут](https://drive.google.com/file/d/16Cm2tgrpuDH8eIdxdSYyOsfDPqnJ3byd/view?usp=sharing)"],"metadata":{"id":"M9IlAZAPBBm9"}},{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"ZLVI_WIcuT56"}},{"cell_type":"code","source":["# Абрамов Семён"],"metadata":{"id":"3AfG_Tal0P2S"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pip install requests"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0ZfK95dC-B3g","executionInfo":{"status":"ok","timestamp":1730368031257,"user_tz":-300,"elapsed":9683,"user":{"displayName":"Semyon Abramov","userId":"15761524948708296849"}},"outputId":"9ab45585-31ec-488c-dacb-c69410ed4f21"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (2.32.3)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests) (3.4.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests) (2.2.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests) (2024.8.30)\n"]}]},{"cell_type":"markdown","source":["## Задание 1. HTTP-запросы, ответы и погода"],"metadata":{"id":"Gtm1UjYgDlY7"}},{"cell_type":"markdown","source":["Описание:\n","\n","Напишите HTTP-запрос для получения информации о погоде в введенном городе из API.\n","\n","Можно использовать API: https://open-meteo.com/. Используйте метод GET.\n","\n","\n","Ввод\n","```\n","56.50, 60.35\n","```\n","\n","Вывод\n","```\n","Сегодня (1.11) погода 20 ◦С, нет осадков, туман\n","```\n","\n","\n","\n"],"metadata":{"id":"FtjnLNIKzfMZ"}},{"cell_type":"code","source":["import requests\n","from datetime import datetime\n","\n","\n","def send_request(url):\n","    response = requests.get(url)\n","\n","    status_code = response.status_code\n","    if status_code == 200:\n","        return response.json()\n","    return None\n","\n","\n","def clear_data(data):\n","    current_date = datetime.today().date()\n","    current_date = f'{current_date.day}.{current_date.month}'\n","\n","    temperature = data['current']['temperature_2m']\n","    temperature_format = data['current_units']['temperature_2m']\n","\n","    weather_code = data['current']['weather_code']\n","\n","    if weather_code in [0, 1]:\n","        weather = 'нет осадков, ясно'\n","    elif weather_code == 45:\n","        weather = 'нет осадков, туман'\n","    elif weather_code in [61, 63, 65, 71, 73, 75]:\n","        weather = 'осадки, нет тумана'\n","    else:\n","        weather = 'выгляни в окно и посмотри сам'\n","\n","    message = f'Сегодня ({current_date}) погода {temperature} {temperature_format}, {weather}'\n","    return message\n","\n","\n","\n","def main():\n","    coordinates = input('Введите ваши координаты: ').split(', ')\n","    url = f'https://api.open-meteo.com/v1/forecast?latitude={coordinates[0]}&longitude={coordinates[1]}&current=temperature_2m,weather_code&forecast_days=1'\n","    data = send_request(url)\n","    message = clear_data(data)\n","    print(message)\n","\n","\n","main()"],"metadata":{"id":"5Mbs40_buVRV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734606220376,"user_tz":-300,"elapsed":13508,"user":{"displayName":"Semyon Abramov","userId":"15761524948708296849"}},"outputId":"f0b30b6e-f660-41e7-8d22-2c359ee08d44"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите ваши координаты: 56.50, 60.35\n","Сегодня (19.12) погода -8.6 °C, осадки, нет тумана\n"]}]},{"cell_type":"markdown","source":["## Задание 2. HTTP-запросы, ответы и покемоны"],"metadata":{"id":"FYjU9WmVDoGs"}},{"cell_type":"markdown","source":["**Описание:**\n","\n","\n","Создайте код программы, которая будет взаимодействовать с API, со следующим функионалом:\n","\n","1. Используя метод GET, отправьте запрос на endpoint /pokemon, чтобы получить список первых 20 покемонов\n","\n","2. Извлеките имена покемонов из ответа и выведите их списком\n","\n","3. Введите с помощью input() название одного из покемонов\n","\n","\n","```\n","Имя покемона: clefairy\n","```\n","\n","\n","\n","4. Отправьте GET-запрос, чтобы получить полную информацию о выбранном покемоне\n","\n","5. Извлеките и выведите следующие данные о введенном покемоне:\n","\n","     • Имя\n","\n","     • Тип\n","\n","     • Вес\n","\n","     • Рост\n","\n","     • Способности\n","\n","Используйте PokéAPI (https://pokeapi.co/), который предоставляет информацию о покемонах, их характеристиках, типах и другую информацию."],"metadata":{"id":"oZ1guEbl0PZm"}},{"cell_type":"code","source":["import requests\n","\n","\n","# Запрос\n","def send_request(url):\n","    response = requests.get(url)\n","\n","    status_code = response.status_code\n","    if status_code == 200:\n","        return response.json()\n","    return None\n","\n","\n","# Создание списка имён\n","def clear_data(data, names):\n","    for i in range(len(data['results'])):\n","           names.append(data['results'][i]['name'])\n","    return names\n","\n","\n","# Поиск имён\n","def main(url):\n","    data = send_request(url)\n","    message = clear_data(data, names)\n","\n","    return message\n","\n","\n","url = 'https://pokeapi.co/api/v2/pokemon'\n","information = []\n","names = []\n","info = ''\n","main(url)\n","print(\"Список покемонов:\", names)\n","pokemon = input(\"\\nВведите имя покемона: \").lower()\n","\n","check = False\n","for i in names:\n","    if pokemon == i:\n","        check = True\n","\n","if check:\n","    types = ''\n","    abilities = ''\n","\n","    response = requests.get(f'https://pokeapi.co/api/v2/pokemon/{pokemon}')\n","    info = response.json()\n","\n","    print('\\nИмя: ' + pokemon)\n","\n","    for i in range(len(info['types'])):\n","        types += str(info['types'][i]['type']['name']) + ' '\n","    print('Типы: ' + types)\n","\n","    print('Вес: ' + str(info['weight']))\n","    print('Рост: ' + str(info['height']))\n","\n","    for i in range(len(info['abilities'])):\n","        abilities += str(info['abilities'][i]['ability']['name']) + ' '\n","    print('Способности: ' + abilities)"],"metadata":{"id":"JkFmivjp25NL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734552630707,"user_tz":-300,"elapsed":4430,"user":{"displayName":"Semyon Abramov","userId":"15761524948708296849"}},"outputId":"f6e34703-cfef-4998-c2f1-11ad63eb7206"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Список покемонов: ['bulbasaur', 'ivysaur', 'venusaur', 'charmander', 'charmeleon', 'charizard', 'squirtle', 'wartortle', 'blastoise', 'caterpie', 'metapod', 'butterfree', 'weedle', 'kakuna', 'beedrill', 'pidgey', 'pidgeotto', 'pidgeot', 'rattata', 'raticate']\n","\n","Введите имя покемона: charizard\n","\n","Имя: charizard\n","Типы: fire flying \n","Вес: 905\n","Рост: 17\n","Способности: blaze solar-power \n"]}]},{"cell_type":"markdown","source":["## Задание 3. HTTP-запросы, ответы и посты"],"metadata":{"id":"Ci07uZdADue9"}},{"cell_type":"markdown","source":["**Описание:**\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API, реализуя следующие функции:\n","\n","1. Реализуйте функцию, которая выполняет GET-запрос к https://jsonplaceholder.typicode.com/posts и возвращает список постов в формате JSON\n","\n","2. Реализуйте функцию, котороая получает вводимое ID поста, выполняет GET-запрос по ID и возвращает данные поста в формате JSON\n","\n","3. Реализуйте функцию, которая выполняет обработку JSON из пункта 2 и выводит всю важную информацию в консоль"],"metadata":{"id":"h194KTer1-B3"}},{"cell_type":"code","source":["import requests\n","\n","\n","def get_list(url):\n","    response = requests.get(url)\n","    info = response.json()\n","\n","    print('\\nСписок постов: ')\n","    for i in range(len(info)):\n","        print(str(i + 1) + '. ' + str(info[i]['title']))\n","\n","    return None\n","\n","\n","def get_post_by_id_json(post_id, url):\n","    response = requests.get(url)\n","    info = response.json()\n","\n","    print(info[post_id - 1])\n","\n","    return None\n","\n","\n","def get_post_by_id(post_id, url):\n","    response = requests.get(url)\n","    info = response.json()\n","\n","    print(str(info[post_id - 1]['title']))\n","    print('\\n' + str(info[post_id - 1]['body']))\n","\n","    return None\n","\n","\n","def menu():\n","    message = str(input('МЕНЮ\\n1. Показать список постов.\\n2. Поиск поста по ID (в JSON формате).\\n3. Поиск поста по ID\\n \\nНапишите номер пункта: '))\n","\n","    if message == '1':\n","        get_list(url)\n","    elif message == '2':\n","        post_id = int(input('\\nВведите ID поста: '))\n","\n","        if post_id > 0 and post_id < 101:\n","            get_post_by_id_json(post_id, url)\n","        else:\n","            print('Недопустимое ID')\n","    elif message == '3':\n","        post_id = int(input('\\nВведите ID поста: '))\n","\n","        if post_id > 0 and post_id < 101:\n","            get_post_by_id(post_id, url)\n","        else:\n","            print('Недопустимое ID')\n","    else:\n","        print('Кажется, вы ошиблись...')\n","\n","    return None\n","\n","\n","\n","url = 'https://jsonplaceholder.typicode.com/posts'\n","menu()"],"metadata":{"id":"YANQx4o258Zn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734554363088,"user_tz":-300,"elapsed":5803,"user":{"displayName":"Semyon Abramov","userId":"15761524948708296849"}},"outputId":"b1f3d279-a25e-48ac-dbee-02f66ab6c837"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["МЕНЮ\n","1. Показать список постов.\n","2. Поиск поста по ID (в JSON формате).\n","3. Поиск поста по ID\n"," \n","Напишите номер пункта: 1\n","\n","Список постов: \n","1. sunt aut facere repellat provident occaecati excepturi optio reprehenderit\n","2. qui est esse\n","3. ea molestias quasi exercitationem repellat qui ipsa sit aut\n","4. eum et est occaecati\n","5. nesciunt quas odio\n","6. dolorem eum magni eos aperiam quia\n","7. magnam facilis autem\n","8. dolorem dolore est ipsam\n","9. nesciunt iure omnis dolorem tempora et accusantium\n","10. optio molestias id quia eum\n","11. et ea vero quia laudantium autem\n","12. in quibusdam tempore odit est dolorem\n","13. dolorum ut in voluptas mollitia et saepe quo animi\n","14. voluptatem eligendi optio\n","15. eveniet quod temporibus\n","16. sint suscipit perspiciatis velit dolorum rerum ipsa laboriosam odio\n","17. fugit voluptas sed molestias voluptatem provident\n","18. voluptate et itaque vero tempora molestiae\n","19. adipisci placeat illum aut reiciendis qui\n","20. doloribus ad provident suscipit at\n","21. asperiores ea ipsam voluptatibus modi minima quia sint\n","22. dolor sint quo a velit explicabo quia nam\n","23. maxime id vitae nihil numquam\n","24. autem hic labore sunt dolores incidunt\n","25. rem alias distinctio quo quis\n","26. est et quae odit qui non\n","27. quasi id et eos tenetur aut quo autem\n","28. delectus ullam et corporis nulla voluptas sequi\n","29. iusto eius quod necessitatibus culpa ea\n","30. a quo magni similique perferendis\n","31. ullam ut quidem id aut vel consequuntur\n","32. doloremque illum aliquid sunt\n","33. qui explicabo molestiae dolorem\n","34. magnam ut rerum iure\n","35. id nihil consequatur molestias animi provident\n","36. fuga nam accusamus voluptas reiciendis itaque\n","37. provident vel ut sit ratione est\n","38. explicabo et eos deleniti nostrum ab id repellendus\n","39. eos dolorem iste accusantium est eaque quam\n","40. enim quo cumque\n","41. non est facere\n","42. commodi ullam sint et excepturi error explicabo praesentium voluptas\n","43. eligendi iste nostrum consequuntur adipisci praesentium sit beatae perferendis\n","44. optio dolor molestias sit\n","45. ut numquam possimus omnis eius suscipit laudantium iure\n","46. aut quo modi neque nostrum ducimus\n","47. quibusdam cumque rem aut deserunt\n","48. ut voluptatem illum ea doloribus itaque eos\n","49. laborum non sunt aut ut assumenda perspiciatis voluptas\n","50. repellendus qui recusandae incidunt voluptates tenetur qui omnis exercitationem\n","51. soluta aliquam aperiam consequatur illo quis voluptas\n","52. qui enim et consequuntur quia animi quis voluptate quibusdam\n","53. ut quo aut ducimus alias\n","54. sit asperiores ipsam eveniet odio non quia\n","55. sit vel voluptatem et non libero\n","56. qui et at rerum necessitatibus\n","57. sed ab est est\n","58. voluptatum itaque dolores nisi et quasi\n","59. qui commodi dolor at maiores et quis id accusantium\n","60. consequatur placeat omnis quisquam quia reprehenderit fugit veritatis facere\n","61. voluptatem doloribus consectetur est ut ducimus\n","62. beatae enim quia vel\n","63. voluptas blanditiis repellendus animi ducimus error sapiente et suscipit\n","64. et fugit quas eum in in aperiam quod\n","65. consequatur id enim sunt et et\n","66. repudiandae ea animi iusto\n","67. aliquid eos sed fuga est maxime repellendus\n","68. odio quis facere architecto reiciendis optio\n","69. fugiat quod pariatur odit minima\n","70. voluptatem laborum magni\n","71. et iusto veniam et illum aut fuga\n","72. sint hic doloribus consequatur eos non id\n","73. consequuntur deleniti eos quia temporibus ab aliquid at\n","74. enim unde ratione doloribus quas enim ut sit sapiente\n","75. dignissimos eum dolor ut enim et delectus in\n","76. doloremque officiis ad et non perferendis\n","77. necessitatibus quasi exercitationem odio\n","78. quam voluptatibus rerum veritatis\n","79. pariatur consequatur quia magnam autem omnis non amet\n","80. labore in ex et explicabo corporis aut quas\n","81. tempora rem veritatis voluptas quo dolores vero\n","82. laudantium voluptate suscipit sunt enim enim\n","83. odit et voluptates doloribus alias odio et\n","84. optio ipsam molestias necessitatibus occaecati facilis veritatis dolores aut\n","85. dolore veritatis porro provident adipisci blanditiis et sunt\n","86. placeat quia et porro iste\n","87. nostrum quis quasi placeat\n","88. sapiente omnis fugit eos\n","89. sint soluta et vel magnam aut ut sed qui\n","90. ad iusto omnis odit dolor voluptatibus\n","91. aut amet sed\n","92. ratione ex tenetur perferendis\n","93. beatae soluta recusandae\n","94. qui qui voluptates illo iste minima\n","95. id minus libero illum nam ad officiis\n","96. quaerat velit veniam amet cupiditate aut numquam ut sequi\n","97. quas fugiat ut perspiciatis vero provident\n","98. laboriosam dolor voluptates\n","99. temporibus sit alias delectus eligendi possimus magni\n","100. at nam consequatur ea labore ea harum\n"]}]},{"cell_type":"markdown","source":["## Задание 4. HTTP-запросы, ответы и работа с постами"],"metadata":{"id":"rtwepQvJDy9N"}},{"cell_type":"markdown","source":["**Описание**\n","\n","Создайте программу, которая будет взаимодействовать с JSONPlaceholder API (из предыдущего задания), реализуя новые функции:\n","\n","1. Реализуйте функцию, которая принимает заголовок, содержимое и ID пользователя (информация вводится с помощью input()), выполняет POST-запрос для создания нового поста и возвращает информацию о созданном посте в формате JSON\n","\n","\n","```\n","Заголовок: Новый пост\n","Содержимое поста: Тут должно находиться содержимое нового поста...\n","ID пользователя: 10\n","```\n","\n","\n","\n","2. Реализуйте функцию, которая принимает ID поста, новый заголовок и новое содержимое, выполняет PUT-запрос и возвращает обновлённый пост в формате JSON\n","\n","3. Реализуйте функцию, которая принимает ID поста, выполняет DELETE-запрос и возвращает статус-код ответа"],"metadata":{"id":"4MjiaxDM58ta"}},{"cell_type":"code","source":["# import requests\n","\n","\n","# def new_post(url, info):\n","#     response = requests.get(url)\n","#     info = response.json()\n","\n","#     title = str(input('Заголовок: '))\n","#     body = str(input('Содержимое поста: '))\n","#     userID = int(input('ID пользователя: '))\n","#     post_id = int(len(info))\n","\n","#     data = {\"userID\": userID, \"id\": post_id, \"title\": title, \"body\": body}\n","#     response = requests.post(url, json = data)\n","\n","#     json_response = response.json()\n","#     print(json_response)\n","\n","#     return None\n","\n","\n","# def update_post(post_ID, url):\n","\n","#     return None\n","\n","\n","# def menu():\n","#     message = str(input('МЕНЮ\\n1. Создать пост.\\n2. Исправить пост.\\n3. Удалить пост\\n \\nНапишите номер пункта: '))\n","\n","#     if message == '1':\n","#         new_post(url, info)\n","#     elif message == '2':\n","#         post_ID = int(input('Введите ID поста: '))\n","\n","#         if post_ID > 0 and post_ID < 101:\n","#             url = f'https://jsonplaceholder.typicode.com/posts/{post_ID}'\n","#             update_post(post_ID, url)\n","#     elif message == '3':\n","#         print(message)\n","#     else:\n","#         print('Кажется, вы ошиблись...')\n","\n","#     return None\n","\n","\n","# url = 'https://jsonplaceholder.typicode.com/posts'\n","# info = ''\n","\n","# menu()"],"metadata":{"id":"jZUIdwq96DNl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Задание 5. HTTP-запросы, ответы и пёсики"],"metadata":{"id":"0UoRc9vOD3XT"}},{"cell_type":"markdown","source":["**Описание**\n","\n","Создайте программу, которая будет взаимодействовать с Dog API, которая позволит получать список пород собак, вводить несколько пород и получать их фотогрфии.\n","\n","Этапы:\n","\n","1. Создайте функцию, которая использует метод GET и возвращает список всех пород собак в формате нумерованного списка\n","\n","2. Реализуйте возможность ввода нескольких пород собак через запятую\n","\n","\n","```\n","african, chow, dingo\n","```\n","\n","\n","\n","3. Создание функции, которая реализует запрос, возвращает и выводит изображениия собак, породы которых были введены до этого\n","\n","\n","Используйте Dog API (https://dog.ceo/dog-api/), который предоставляет информацию о породах собак и их изображения.\n"],"metadata":{"id":"y0EyPsFQ6mSZ"}},{"cell_type":"markdown","source":["*Подсказка*\n","\n","\n","\n","```\n","import requests\n","from PIL import Image\n","from IPython.display import display\n","import io\n","\n","url = <____>\n","response = <____>\n","        \n","if response.<______> == <___>:\n","      image_url = response.json()['message']\n","\n","res = requests.<__>(image_url)\n","img = Image.open(io.BytesIO(res.content))\n","display(img)\n","```\n","\n"],"metadata":{"id":"yrKv5k13AKEP"}},{"cell_type":"code","source":["import requests, io\n","from PIL import Image\n","from IPython.display import display\n","\n","\n","def get_list(url):\n","    response = requests.get(url)\n","    info = response.json()\n","    info = info['message']\n","\n","    num = 0\n","    for i in info.keys():\n","        num += 1\n","        print(f'{num}. {i}')\n","\n","    return info\n","\n","\n","def get_photo(url, dogs):\n","    response = requests.get(url)\n","    info = response.json()\n","    info = info['message']\n","\n","    for i in info.keys():\n","        for j in dogs:\n","            if i == j:\n","                print(f'https://dog.ceo/api/breed/{i}/images/random')\n","\n","    print('Не вывез показ изображений :(')\n","\n","    return info\n","\n","\n","def menu():\n","    message = str(input('МЕНЮ\\n1. Показать список пород.\\n2. Поиск фотографии по породе.\\n \\nНапишите номер пункта: '))\n","\n","    if message == '1':\n","        get_list(url)\n","    elif message == '2':\n","        dogs = str(input('Введите интересующие породы собак через запятую: ')).lower().replace(' ', '').split(',')\n","        get_photo(url, dogs)\n","    else:\n","        print('Кажется, вы ошиблись...')\n","\n","    return None\n","\n","url = 'https://dog.ceo/api/breeds/list/all'\n","menu()"],"metadata":{"id":"5xti3KRP4Kzp"},"execution_count":null,"outputs":[]}]}