{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1M-O_KUCtKLJnPKgWsQQu9bkGfa2vOHnO","timestamp":1733950558866}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО: Абрамов Семён"],"metadata":{"id":"fLDS5f_mCnPa"}},{"cell_type":"markdown","source":["# Задание (совместное с преподавателем)\n","\n","\n"],"metadata":{"id":"-CSHUbWzCqeM"}},{"cell_type":"markdown","source":["Напишите систему для учёта отпусков с возможностью узнавать, сколько дней отпуска осталось у того или иного сотрудника.\n","Для этого создайте класс Employee со следующими методами:\n","\n","- Метод consume_vacation должен отвечать за списание дней отпуска.\n","\n","Единственный параметр этого метода (кроме self) — количество потраченных отпускных дней (целое число).\n","\n","При вызове метода consume_vacation соответствующее количество дней должно вычитаться из общего числа доступных отпускных дней сотрудника.\n","\n","Чтобы определить число доступных отпускных дней конкретного сотрудника, в классе опишите атрибут экземпляра |, который по умолчанию будет равен значению атрибута класса vacation_days, и используйте этот атрибут в работе метода.\n","\n","- Метод get_vacation_details должен возвращать остаток отпускных дней сотрудника в формате: ```Остаток отпускных дней: <число>.```\n","\n","\n","Чтобы проверить работу программы:\n","1. Создайте экземпляр класса Employee.\n","2. Вызовите метод consume_vacation, указав подходящее значение аргумента, например 7.\n","3. Вызовите метод get_vacation_details."],"metadata":{"id":"a_flBjZOCwYz"}},{"cell_type":"code","source":["class Employee():\n","    \"\"\" Вычисление отпускных дней \"\"\"\n","    def __init__(self, vacation_days):\n","        self.vacation_days = vacation_days\n","\n","    def consume_vacation(self, miss_days):\n","        self.remaining_days = self.vacation_days - miss_days\n","\n","    def get_vacation_details(self):\n","        print(f'Остаток отпускных дней: {self.remaining_days}')\n","\n","\n","man = Employee(15)\n","man.consume_vacation(7)\n","man.get_vacation_details()"],"metadata":{"id":"2TyRY9a1XCOu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"C0Z_wXo9XIr2"}},{"cell_type":"markdown","source":["Задание:\n","\n","Создайте класс с именем Rectangle который имеет:\n","- Атрибуты ширины и высоты.\n","- Метод расчета площади.\n","- Метод расчета периметра.\n","- Метод отображения размеров прямоугольника.\n","\n","Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность."],"metadata":{"id":"jQ4qqd8nEZBY"}},{"cell_type":"code","source":["class Rectangle():\n","    \"\"\" Прямоугольники \"\"\"\n","    def __init__(self, width, height):\n","        self.width = width\n","        self.height = height\n","\n","    def calculating_area(self):\n","        self.area = self.width * self.height\n","\n","    def calculating_perimeter(self):\n","        self.perimeter = self.width + self.height\n","\n","    def displaying_sizes(self):\n","        print('Я не совсем понал что значит \"Метод отображения размеров прямоугольника\", по этому вот:')\n","        print(f'Площадь: {self.area}, периметр: {self.perimeter} (при стронах {self.width} на {self.height})')\n","\n","object = Rectangle(15, 20)\n","object.calculating_area()\n","object.calculating_perimeter()\n","object.displaying_sizes()"],"metadata":{"id":"dG6uNPqTEAvt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"0ct1u6lqE73j"}},{"cell_type":"markdown","source":["Задание: Создайте мини версию банковской системы:\n","\n","\n","Инструкции:\n","\n","1. Создайте класс BankAccountсо следующими атрибутами:\n","    - account_holder -  владелец счета\n","    - balance - баланс счета\n","\n","2. Реализуйте следующие методы:\n","    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.\n","    - deposit(amount): Добавьте указанную сумму к балансу.\n","    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.\n","    - get_balance(): Возврат текущего баланса.\n","\n","\n","Создайте объект класса и продемонстрируйте его возможности"],"metadata":{"id":"FOpIpcLxE-WK"}},{"cell_type":"code","source":["class BankAccount():\n","    \"\"\" Банковский счёт \"\"\"\n","    def __init__(self, account_holder, balance):\n","        self.account_holder = account_holder\n","        self.balance = 0\n","\n","    def deposit(self, amount):\n","        self.balance += amount\n","        print(f\"{self.account_holder} успешно внес {amount}р на счет. Баланс: {self.balance}р\")\n","\n","    def withdraw(self, amount):\n","        if self.balance >= amount:\n","            self.balance -= amount\n","            print(f\"{self.account_holder} успешно снял {amount}р со счета. Баланс: {self.balance}р\")\n","        else:\n","            print(f\"Внимание! Недостаточно средств! Баланс: {self.balance}р\")\n","\n","    def get_balance(self):\n","        return self.balance\n","\n","\n","account = BankAccount(\"Абрамов Семён\", 0)\n","account.deposit(1000)\n","account.withdraw(300)\n","print(f\"Баланс счета: {account.get_balance()}\")"],"metadata":{"id":"WWXNIUrCE99W","executionInfo":{"status":"ok","timestamp":1734600482889,"user_tz":-300,"elapsed":256,"user":{"displayName":"Semyon Abramov","userId":"15761524948708296849"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"bab5600d-1888-4847-84b1-f8ebf0948ec6"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Абрамов Семён успешно внес 1000р на счет. Баланс: 1000р\n","Абрамов Семён успешно снял 300р со счета. Баланс: 700р\n","Баланс счета: 700\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"C5DX5Uf2FfP6"}},{"cell_type":"markdown","source":["Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов"],"metadata":{"id":"0cR-MYepFgz6"}},{"cell_type":"code","source":[],"metadata":{"id":"Oz9BZbhAFwua"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дополнительное задание\n"],"metadata":{"id":"b_mJHXcQGI9t"}},{"cell_type":"markdown","source":["Задача: Система управления библиотекой\n","\n","**Цель**\n","Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.\n","\n","**Требования**\n","\n","1. **Определение класса**:\n","   – Создайте класс с именем «Book» со следующими атрибутами:\n","     - `title`\n","     - `автор`\n","     - `isbn`\n","     - `is_borrowed` (по умолчанию `False`)\n","\n","2. **Класс библиотеки**:\n","   - Создайте класс с именем Library, который управляет коллекцией книг.\n","   - Класс должен иметь следующие методы:\n","     - `__init__(self)`: инициализирует пустой список книг.\n","     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.\n","     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.\n","     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.\n","     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.\n","     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.\n","\n","3. **Взаимодействие с пользователем**:\n","   - Создайте простое текстовое меню, которое позволит пользователям:\n","     - Добавить книгу\n","     - Одолжить книгу\n","     - Вернуть книгу\n","     - Список доступных книг\n","     - Выйти из программы"],"metadata":{"id":"pnIUdFPcGOVL"}},{"cell_type":"code","source":["# import os\n","\n","\n","# class Book():\n","#     def __init__(self, title, author, isbn, is_borrowed):\n","#         self.title = title\n","#         self.author = author\n","#         self.isbn = isbn\n","#         self.is_borrowed = False\n","\n","# class Library():\n","#     def __init__(self):\n","#         self.book_list = []\n","\n","#     def add_book(self, book: Book):\n","#         os.system('cls' if os.name == 'nt' else 'clear')\n","\n","#         title = str(input('Как называется книга?: ')).lower()\n","#         author = str(input('Кто её автор?: ')).lower()\n","#         isbn = str(input('ISBN: '))\n","\n","#         book = Book(title = title, author = author, isbn = isbn, is_borrowed = False)\n","\n","#         self.book_list.append(f'[{book.title, book.author, book.isbn, book.is_borrowed}]')\n","#         print(f'Книга \"{book.title}\" успешно добавлена!')\n","\n","#     def borrow_book(self, isbn: str):\n","#         List_1[3] = True\n","\n","#     def return_book(self, isbn: str):\n","\n","#         pass\n","\n","#     def list_available_books(self):\n","#         os.system('cls' if os.name == 'nt' else 'clear')\n","\n","#         print('Список книг: ')\n","#         for i in range(len(self.book_list)):\n","#             print(f'{i + 1}. {self.book_list[i]}')\n","\n","#     def find_book(self, isbn: str):\n","\n","#         pass\n","\n","\n","# def menu(List_1):\n","#     os.system('cls' if os.name == 'nt' else 'clear')\n","\n","#     num = int(input('МЕНЮ:\\n1. Добавить книгу\\n2. Одолжить книгу\\n3. Вернуть книгу\\n4. Список доступных книг\\n5. Выйти из программы\\n \\nЧто желаете сделать? (напишите номер пункта): '))\n","\n","#     if num == 1:\n","#         List_1.add_book(Book)\n","\n","#         menu(List_1)\n","#     elif num == 2:\n","#         book = str(input('Какая книга вас интересует?: ')).lower()\n","\n","#         for i in List_1:\n","#             if i == book and List_1[3] == False:\n","#                 List_1.borrow_book(List_1[2])\n","#             elif i == book and List_1[3] != False:\n","#                 print('К сожалению, книга сейчас на руках')\n","\n","#                 input()\n","#             else:\n","#                 print('Такой книги нет в нашей библиотеке')\n","\n","#                 input()\n","\n","#         menu(List_1)\n","#     elif num == 3:\n","#         print()\n","\n","#         menu(List_1)\n","#     elif num == 4:\n","#         List_1.list_available_books()\n","\n","#         input()\n","\n","#         menu(List_1)\n","#     elif num == 5:\n","#         print()\n","\n","#         menu(List_1)\n","\n","\n","# List_1 = Library()\n","# menu(List_1)"],"metadata":{"id":"GKKmdfN8GL6f"},"execution_count":null,"outputs":[]}]}