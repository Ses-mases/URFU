{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1xLO6Oh-eS6h_nR38EhRfJqe9zaaxR6wD","timestamp":1733950568167},{"file_id":"1fdDdDHaE4KNBgvMIfCjJ2U7NY_5A7bzr","timestamp":1732780503194}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО: Абрамов Семён"],"metadata":{"id":"GEsFKJm-ABFp"}},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"H4DrYnJjADuZ"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.\n","\n","\n","Отрабатываемый принцип: Наследование\n","\n"],"metadata":{"id":"C17FWep-AF4a"}},{"cell_type":"code","source":["class Employee():\n","    def __init__(self, profit, working_days):\n","        self.profit = profit\n","        self.working_days = working_days\n","\n","\n","class Manager(Employee):\n","    def __init__(self, profit, working_days, new_employees):\n","        super().__init__(profit, working_days)\n","        self.new_employees = new_employees\n","\n","        result = (self.profit // 2) // (self.new_employees // 2) * self.working_days\n","        print(f'Зарплата менеджера: {result}')\n","\n","\n","class Developer(Employee):\n","    def __init__(self, profit, working_days, completed_projects):\n","        super().__init__(profit, working_days)\n","        self.completed_projects = completed_projects\n","\n","        result = (self.profit // 2) // (self.completed_projects * 2) * self.working_days\n","        print(f'Зарплата разработчика: {result}')\n","\n","\n","manager = Manager(70000, 15, 20)\n","developer = Developer(80000, 13, 5)"],"metadata":{"id":"aexGXzqCAFH7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ERAi0TG5BI6v"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.\n","\n","\n","Отрабатываемый принцип: Полиморфизм"],"metadata":{"id":"sJ3k7ZcgBK87"}},{"cell_type":"code","source":["class Vehicle():\n","    def description(self):\n","        return \"Это базовый класс транспортных средств\"\n","\n","class Car(Vehicle):\n","    def description(self):\n","        return \"Это автомобиль, он быстрый и удобный\"\n","\n","class Bicycle(Vehicle):\n","    def description(self):\n","        return \"Это велосипед - экологичный вид транспорта\"\n","\n","class Truck(Vehicle):\n","    def description(self):\n","        return \"Это грузовик,он мощный и вместительный\"\n","\n","car = Car()\n","bicycle = Bicycle()\n","truck = Truck()\n","\n","print(car.description())\n","print(bicycle.description())\n","print(truck.description())"],"metadata":{"id":"WOFOZQmDBKf4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"7E_SJXMJBvD4"}},{"cell_type":"markdown","source":["Онлайн-магазин:\n","- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.\n","- Product включает информацию о цене, наличии на складе и категории товара.\n","Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.\n","- Customer управляет информацией о пользователе и его истории заказов.\n","- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.\n"],"metadata":{"id":"dd1mwKj_BxHa"}},{"cell_type":"code","source":["class Product():\n","    def __init__(self, name, price, stock, category):\n","        self.name = name\n","        self.price = price\n","        self.stock = stock\n","        self.category = category\n","\n","    def update_stock(self, quantity):\n","        self.stock -= quantity\n","\n","    def is_available(self, quantity):\n","        return self.stock >= quantity\n","\n","\n","class Order():\n","    def __init__(self, customer):\n","        self.customer = customer\n","        self.items = []\n","        self.total_price = 0.0\n","        self.discount = 0.15 # Скидка 15%\n","        self.tax = 0.1  # Налог 10%\n","\n","    def add_item(self, product, quantity):\n","        if product.is_available(quantity):\n","            product.update_stock(quantity)\n","            self.items.append((product, quantity))\n","            self.total_price += product.price * quantity\n","        else:\n","            print(f\"Недостаточно товара {product.name}\")\n","\n","    def calculate_total(self):\n","        total_with_discount = self.total_price * (1 - self.discount)\n","        total_with_tax = total_with_discount * (1 + self.tax)\n","        return total_with_tax\n","\n","    def apply_discount(self, discount):\n","        self.discount = discount\n","\n","\n","class Customer():\n","    def __init__(self, name):\n","        self.name = name\n","        self.order_history = []\n","\n","    def add_order(self, order):\n","        self.order_history.append(order)\n","\n","    def print_order(self):\n","        print(self.order_history)\n","\n","\n","class ShoppingCart:\n","    def __init__(self):\n","        self.items = {}\n","\n","    def add_product(self, product, quantity):\n","        if product.name in self.items:\n","            self.items[product.name]['quantity'] += quantity\n","        else:\n","            self.items[product.name] = {'product': product, 'quantity': quantity}\n","\n","    def remove_product(self, product_name):\n","        if product_name in self.items:\n","            del self.items[product_name]\n","\n","    def update_quantity(self, product_name, quantity):\n","        if product_name in self.items:\n","            if quantity <= 0:\n","                self.remove_product(product_name)\n","            else:\n","                self.items[product_name]['quantity'] = quantity\n","\n","    def view_cart(self):\n","        for item in self.items.values():\n","            product = item['product']\n","            quantity = item['quantity']\n","            print(f\"{product.name}: {quantity} x {product.price}р = {product.price * quantity}р\")\n","\n","    def checkout(self, customer):\n","        order = Order(customer)\n","        for item in self.items.values():\n","            product = item['product']\n","            quantity = item['quantity']\n","            order.add_item(product, quantity)\n","\n","        customer.add_order(order)\n","        print('У вас скидка 15%!')\n","        print(f\"Итого к оплате: {order.calculate_total():.0f}р\")\n","        return order\n","\n","\n","product1 = Product(\"Ноутбук\", 100000, 5, \"Электроника\")\n","product2 = Product(\"Телефон\", 50000, 10, \"Электроника\")\n","\n","customer = Customer(\"Семён Абрамов\")\n","\n","cart = ShoppingCart()\n","cart.add_product(product1, 1)\n","cart.add_product(product2, 2)\n","\n","cart.view_cart()\n","order = cart.checkout(customer)"],"metadata":{"id":"wkCcv_K-Bwdv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734607195950,"user_tz":-300,"elapsed":281,"user":{"displayName":"Semyon Abramov","userId":"15761524948708296849"}},"outputId":"33d38379-408b-4cb1-f99f-f5575bf66c44"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Ноутбук: 1 x 100000р = 100000р\n","Телефон: 2 x 50000р = 100000р\n","У вас скидка 15%!\n","Итого к оплате: 187000р\n"]}]},{"cell_type":"markdown","source":["# Задание 4"],"metadata":{"id":"ih7iPlYfB7lL"}},{"cell_type":"markdown","source":["Симулятор космического корабля:\n","- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.\n","- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.\n","- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).\n","- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами)."],"metadata":{"id":"zLwqVCbpCBvc"}},{"cell_type":"code","source":["import random\n","\n","\n","class SpaceShip():\n","    def __init__(self, fuel, hull_state, speed):\n","        self.fuel = fuel\n","        self.hull_state = hull_state\n","        self.speed = speed\n","\n","    def get_ship_info(self):\n","        print(f'Топливо: {self.fuel}\\nСостояние корпуса: {self.hull_state}\\nСкорость: {self.speed}')\n","\n","\n","class CrewMember():\n","    def __init__(self, health, skills, team_roles):\n","        self.health = health\n","        self.skills = skills\n","        self.team_roles = team_roles\n","\n","    def get_crew_info(self, health, skills, team_roles):\n","        print(self.health)\n","\n","\n","class Mission():\n","    def __init__(self, goals, resources, possible_events):\n","        self.goals = goals\n","        self.resources = resources\n","        self.possible_events = possible_events\n","\n","\n","# Создание корабля\n","fuel = random.randint(500, 1000)\n","hull_state = 100\n","speed = random.randint(15, 150)\n","\n","ship = SpaceShip(fuel, hull_state, speed)\n","ship.get_ship_info()\n","\n","# Создание экипажа\n","captain = CrewMember(100, ['Управление', 'Наставление'], 'Капитан')\n","pilot = CrewMember(100, ['Вождение'], 'Пилот')\n","mechanic = CrewMember(100, ['Починка'], 'Механик')\n"],"metadata":{"id":"4NyrOOy8B9ED","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734605670258,"user_tz":-300,"elapsed":336,"user":{"displayName":"Semyon Abramov","userId":"15761524948708296849"}},"outputId":"991a84f0-bd9c-42dd-822c-df1c2b2e4784"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Топливо: 773\n","Состояние корпуса: 100\n","Скорость: 35\n"]}]},{"cell_type":"markdown","source":["# Дополнительно:"],"metadata":{"id":"F7mRVsZjCXk0"}},{"cell_type":"markdown","source":["**Описание:** создайте консольную версию игры крестики-нолики, используя классы"],"metadata":{"id":"X4Lkf86UCc1h"}},{"cell_type":"code","source":[],"metadata":{"id":"x9OxpNsyCcUo"},"execution_count":null,"outputs":[]}]}